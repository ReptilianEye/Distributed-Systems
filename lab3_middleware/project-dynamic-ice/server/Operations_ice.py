# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.10
#
# <auto-generated>
#
# Generated from file `Operations.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy

# Start of module Calculations
_M_Calculations = Ice.openModule('Calculations')
__name__ = 'Calculations'

if '_t_Seq' not in _M_Calculations.__dict__:
    _M_Calculations._t_Seq = IcePy.defineSequence('::Calculations::Seq', (), IcePy._t_int)

_M_Calculations._t_Calculator = IcePy.defineValue('::Calculations::Calculator', Ice.Value, -1, (), False, True, None, ())

if 'CalculatorPrx' not in _M_Calculations.__dict__:
    _M_Calculations.CalculatorPrx = Ice.createTempClass()
    class CalculatorPrx(Ice.ObjectPrx):

        def add(self, a, b, context=None):
            return _M_Calculations.Calculator._op_add.invoke(self, ((a, b), context))

        def addAsync(self, a, b, context=None):
            return _M_Calculations.Calculator._op_add.invokeAsync(self, ((a, b), context))

        def begin_add(self, a, b, _response=None, _ex=None, _sent=None, context=None):
            return _M_Calculations.Calculator._op_add.begin(self, ((a, b), _response, _ex, _sent, context))

        def end_add(self, _r):
            return _M_Calculations.Calculator._op_add.end(self, _r)

        def subtract(self, a, b, context=None):
            return _M_Calculations.Calculator._op_subtract.invoke(self, ((a, b), context))

        def subtractAsync(self, a, b, context=None):
            return _M_Calculations.Calculator._op_subtract.invokeAsync(self, ((a, b), context))

        def begin_subtract(self, a, b, _response=None, _ex=None, _sent=None, context=None):
            return _M_Calculations.Calculator._op_subtract.begin(self, ((a, b), _response, _ex, _sent, context))

        def end_subtract(self, _r):
            return _M_Calculations.Calculator._op_subtract.end(self, _r)

        def multiply(self, a, b, context=None):
            return _M_Calculations.Calculator._op_multiply.invoke(self, ((a, b), context))

        def multiplyAsync(self, a, b, context=None):
            return _M_Calculations.Calculator._op_multiply.invokeAsync(self, ((a, b), context))

        def begin_multiply(self, a, b, _response=None, _ex=None, _sent=None, context=None):
            return _M_Calculations.Calculator._op_multiply.begin(self, ((a, b), _response, _ex, _sent, context))

        def end_multiply(self, _r):
            return _M_Calculations.Calculator._op_multiply.end(self, _r)

        def hello(self, name, context=None):
            return _M_Calculations.Calculator._op_hello.invoke(self, ((name, ), context))

        def helloAsync(self, name, context=None):
            return _M_Calculations.Calculator._op_hello.invokeAsync(self, ((name, ), context))

        def begin_hello(self, name, _response=None, _ex=None, _sent=None, context=None):
            return _M_Calculations.Calculator._op_hello.begin(self, ((name, ), _response, _ex, _sent, context))

        def end_hello(self, _r):
            return _M_Calculations.Calculator._op_hello.end(self, _r)

        def mean(self, seq, context=None):
            return _M_Calculations.Calculator._op_mean.invoke(self, ((seq, ), context))

        def meanAsync(self, seq, context=None):
            return _M_Calculations.Calculator._op_mean.invokeAsync(self, ((seq, ), context))

        def begin_mean(self, seq, _response=None, _ex=None, _sent=None, context=None):
            return _M_Calculations.Calculator._op_mean.begin(self, ((seq, ), _response, _ex, _sent, context))

        def end_mean(self, _r):
            return _M_Calculations.Calculator._op_mean.end(self, _r)

        def increment(self, a, context=None):
            return _M_Calculations.Calculator._op_increment.invoke(self, ((a, ), context))

        def incrementAsync(self, a, context=None):
            return _M_Calculations.Calculator._op_increment.invokeAsync(self, ((a, ), context))

        def begin_increment(self, a, _response=None, _ex=None, _sent=None, context=None):
            return _M_Calculations.Calculator._op_increment.begin(self, ((a, ), _response, _ex, _sent, context))

        def end_increment(self, _r):
            return _M_Calculations.Calculator._op_increment.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Calculations.CalculatorPrx.ice_checkedCast(proxy, '::Calculations::Calculator', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Calculations.CalculatorPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Calculations::Calculator'
    _M_Calculations._t_CalculatorPrx = IcePy.defineProxy('::Calculations::Calculator', CalculatorPrx)

    _M_Calculations.CalculatorPrx = CalculatorPrx
    del CalculatorPrx

    _M_Calculations.Calculator = Ice.createTempClass()
    class Calculator(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Calculations::Calculator', '::Ice::Object')

        def ice_id(self, current=None):
            return '::Calculations::Calculator'

        @staticmethod
        def ice_staticId():
            return '::Calculations::Calculator'

        def add(self, a, b, current=None):
            raise NotImplementedError("servant method 'add' not implemented")

        def subtract(self, a, b, current=None):
            raise NotImplementedError("servant method 'subtract' not implemented")

        def multiply(self, a, b, current=None):
            raise NotImplementedError("servant method 'multiply' not implemented")

        def hello(self, name, current=None):
            raise NotImplementedError("servant method 'hello' not implemented")

        def mean(self, seq, current=None):
            raise NotImplementedError("servant method 'mean' not implemented")

        def increment(self, a, current=None):
            raise NotImplementedError("servant method 'increment' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Calculations._t_CalculatorDisp)

        __repr__ = __str__

    _M_Calculations._t_CalculatorDisp = IcePy.defineClass('::Calculations::Calculator', Calculator, (), None, ())
    Calculator._ice_type = _M_Calculations._t_CalculatorDisp

    Calculator._op_add = IcePy.Operation('add', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0)), (), ((), IcePy._t_int, False, 0), ())
    Calculator._op_subtract = IcePy.Operation('subtract', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0)), (), ((), IcePy._t_int, False, 0), ())
    Calculator._op_multiply = IcePy.Operation('multiply', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0)), (), ((), IcePy._t_int, False, 0), ())
    Calculator._op_hello = IcePy.Operation('hello', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), IcePy._t_string, False, 0), ())
    Calculator._op_mean = IcePy.Operation('mean', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Calculations._t_Seq, False, 0),), (), ((), IcePy._t_double, False, 0), ())
    Calculator._op_increment = IcePy.Operation('increment', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0),), (), ((), IcePy._t_int, False, 0), ())

    _M_Calculations.Calculator = Calculator
    del Calculator

# End of module Calculations
