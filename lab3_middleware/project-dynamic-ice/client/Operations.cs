//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.3
//
// <auto-generated>
//
// Generated from file `Operations.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//


using _System = global::System;

#pragma warning disable 1591

namespace Calculations
{
    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial interface Calculator : global::Ice.Object, CalculatorOperations_
    {
    }
}

namespace Calculations
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
    public delegate void Callback_Calculator_add(int ret);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
    public delegate void Callback_Calculator_subtract(int ret);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
    public delegate void Callback_Calculator_multiply(int ret);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
    public delegate void Callback_Calculator_dynamichello(string ret);
}

namespace Calculations
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
    public interface CalculatorPrx : global::Ice.ObjectPrx
    {
        int add(int a, int b, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<int> addAsync(int a, int b, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_Calculator_add> begin_add(int a, int b, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_add(int a, int b, global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_add(int a, int b, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        int end_add(global::Ice.AsyncResult asyncResult);

        int subtract(int a, int b, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<int> subtractAsync(int a, int b, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_Calculator_subtract> begin_subtract(int a, int b, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_subtract(int a, int b, global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_subtract(int a, int b, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        int end_subtract(global::Ice.AsyncResult asyncResult);

        int multiply(int a, int b, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<int> multiplyAsync(int a, int b, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_Calculator_multiply> begin_multiply(int a, int b, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_multiply(int a, int b, global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_multiply(int a, int b, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        int end_multiply(global::Ice.AsyncResult asyncResult);

        string dynamichello(string name, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<string> dynamichelloAsync(string name, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_Calculator_dynamichello> begin_dynamichello(string name, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_dynamichello(string name, global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_dynamichello(string name, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        string end_dynamichello(global::Ice.AsyncResult asyncResult);
    }
}

namespace Calculations
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
    public interface CalculatorOperations_
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
        int add(int a, int b, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
        int subtract(int a, int b, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
        int multiply(int a, int b, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
        string dynamichello(string name, global::Ice.Current current = null);
    }
}

namespace Calculations
{
    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
    [global::System.Serializable]
    public sealed class CalculatorPrxHelper : global::Ice.ObjectPrxHelperBase, CalculatorPrx
    {
        public CalculatorPrxHelper()
        {
        }

        public CalculatorPrxHelper(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : base(info, context)
        {
        }

        #region Synchronous operations

        public int add(int a, int b, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_addAsync(a, b, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public int subtract(int a, int b, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_subtractAsync(a, b, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public int multiply(int a, int b, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_multiplyAsync(a, b, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public string dynamichello(string name, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_dynamichelloAsync(name, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        #endregion

        #region Async Task operations

        public global::System.Threading.Tasks.Task<int> addAsync(int a, int b, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_addAsync(a, b, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<int> _iceI_addAsync(int iceP_a, int iceP_b, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_add_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<int>(progress, cancel);
            _iceI_add(iceP_a, iceP_b, context, synchronous, completed);
            return completed.Task;
        }

        private const string _add_name = "add";

        private void _iceI_add(int iceP_a, int iceP_b, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<int>(completed);
            outAsync.invoke(
                _add_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeInt(iceP_a);
                    ostr.writeInt(iceP_b);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    int ret;
                    ret = istr.readInt();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<int> subtractAsync(int a, int b, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_subtractAsync(a, b, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<int> _iceI_subtractAsync(int iceP_a, int iceP_b, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_subtract_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<int>(progress, cancel);
            _iceI_subtract(iceP_a, iceP_b, context, synchronous, completed);
            return completed.Task;
        }

        private const string _subtract_name = "subtract";

        private void _iceI_subtract(int iceP_a, int iceP_b, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<int>(completed);
            outAsync.invoke(
                _subtract_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeInt(iceP_a);
                    ostr.writeInt(iceP_b);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    int ret;
                    ret = istr.readInt();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<int> multiplyAsync(int a, int b, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_multiplyAsync(a, b, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<int> _iceI_multiplyAsync(int iceP_a, int iceP_b, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_multiply_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<int>(progress, cancel);
            _iceI_multiply(iceP_a, iceP_b, context, synchronous, completed);
            return completed.Task;
        }

        private const string _multiply_name = "multiply";

        private void _iceI_multiply(int iceP_a, int iceP_b, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<int>(completed);
            outAsync.invoke(
                _multiply_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeInt(iceP_a);
                    ostr.writeInt(iceP_b);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    int ret;
                    ret = istr.readInt();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<string> dynamichelloAsync(string name, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_dynamichelloAsync(name, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<string> _iceI_dynamichelloAsync(string iceP_name, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_dynamichello_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<string>(progress, cancel);
            _iceI_dynamichello(iceP_name, context, synchronous, completed);
            return completed.Task;
        }

        private const string _dynamichello_name = "dynamichello";

        private void _iceI_dynamichello(string iceP_name, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<string>(completed);
            outAsync.invoke(
                _dynamichello_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeString(iceP_name);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    string ret;
                    ret = istr.readString();
                    return ret;
                });
        }

        #endregion

        #region Asynchronous operations

        public global::Ice.AsyncResult<Callback_Calculator_add> begin_add(int a, int b, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_add(a, b, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_add(int a, int b, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_add(a, b, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_add(int a, int b, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_add(a, b, context, callback, cookie, false);
        }

        public int end_add(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _add_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<int>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Calculator_add> begin_add(int iceP_a, int iceP_b, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_add_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Calculator_add, int>(
                (Callback_Calculator_add cb, int ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _add_name, cookie, completedCallback);
            _iceI_add(iceP_a, iceP_b, context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_Calculator_subtract> begin_subtract(int a, int b, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_subtract(a, b, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_subtract(int a, int b, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_subtract(a, b, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_subtract(int a, int b, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_subtract(a, b, context, callback, cookie, false);
        }

        public int end_subtract(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _subtract_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<int>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Calculator_subtract> begin_subtract(int iceP_a, int iceP_b, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_subtract_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Calculator_subtract, int>(
                (Callback_Calculator_subtract cb, int ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _subtract_name, cookie, completedCallback);
            _iceI_subtract(iceP_a, iceP_b, context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_Calculator_multiply> begin_multiply(int a, int b, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_multiply(a, b, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_multiply(int a, int b, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_multiply(a, b, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_multiply(int a, int b, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_multiply(a, b, context, callback, cookie, false);
        }

        public int end_multiply(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _multiply_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<int>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Calculator_multiply> begin_multiply(int iceP_a, int iceP_b, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_multiply_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Calculator_multiply, int>(
                (Callback_Calculator_multiply cb, int ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _multiply_name, cookie, completedCallback);
            _iceI_multiply(iceP_a, iceP_b, context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_Calculator_dynamichello> begin_dynamichello(string name, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_dynamichello(name, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_dynamichello(string name, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_dynamichello(name, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_dynamichello(string name, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_dynamichello(name, context, callback, cookie, false);
        }

        public string end_dynamichello(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _dynamichello_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<string>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Calculator_dynamichello> begin_dynamichello(string iceP_name, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_dynamichello_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Calculator_dynamichello, string>(
                (Callback_Calculator_dynamichello cb, string ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _dynamichello_name, cookie, completedCallback);
            _iceI_dynamichello(iceP_name, context, synchronous, completed);
            return completed;
        }

        #endregion

        #region Checked and unchecked cast operations

        public static CalculatorPrx checkedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            CalculatorPrx r = b as CalculatorPrx;
            if((r == null) && b.ice_isA(ice_staticId()))
            {
                CalculatorPrxHelper h = new CalculatorPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static CalculatorPrx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            CalculatorPrx r = b as CalculatorPrx;
            if((r == null) && b.ice_isA(ice_staticId(), ctx))
            {
                CalculatorPrxHelper h = new CalculatorPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static CalculatorPrx checkedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId()))
                {
                    CalculatorPrxHelper h = new CalculatorPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static CalculatorPrx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId(), ctx))
                {
                    CalculatorPrxHelper h = new CalculatorPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static CalculatorPrx uncheckedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            CalculatorPrx r = b as CalculatorPrx;
            if(r == null)
            {
                CalculatorPrxHelper h = new CalculatorPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static CalculatorPrx uncheckedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            CalculatorPrxHelper h = new CalculatorPrxHelper();
            h.iceCopyFrom(bb);
            return h;
        }

        private static readonly string[] _ids =
        {
            "::Calculations::Calculator",
            "::Ice::Object"
        };

        public static string ice_staticId()
        {
            return _ids[0];
        }

        #endregion

        #region Marshaling support

        public static void write(global::Ice.OutputStream ostr, CalculatorPrx v)
        {
            ostr.writeProxy(v);
        }

        public static CalculatorPrx read(global::Ice.InputStream istr)
        {
            global::Ice.ObjectPrx proxy = istr.readProxy();
            if(proxy != null)
            {
                CalculatorPrxHelper result = new CalculatorPrxHelper();
                result.iceCopyFrom(proxy);
                return result;
            }
            return null;
        }

        #endregion
    }
}

namespace Calculations
{
    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
    public abstract class CalculatorDisp_ : global::Ice.ObjectImpl, Calculator
    {
        #region Slice operations

        public abstract int add(int a, int b, global::Ice.Current current = null);

        public abstract int subtract(int a, int b, global::Ice.Current current = null);

        public abstract int multiply(int a, int b, global::Ice.Current current = null);

        public abstract string dynamichello(string name, global::Ice.Current current = null);

        #endregion

        #region Slice type-related members

        private static readonly string[] _ids =
        {
            "::Calculations::Calculator",
            "::Ice::Object"
        };

        public override bool ice_isA(string s, global::Ice.Current current = null)
        {
            return global::System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override string[] ice_ids(global::Ice.Current current = null)
        {
            return _ids;
        }

        public override string ice_id(global::Ice.Current current = null)
        {
            return _ids[0];
        }

        public static new string ice_staticId()
        {
            return _ids[0];
        }

        #endregion

        #region Operation dispatch

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_add(Calculator obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            int iceP_a;
            int iceP_b;
            iceP_a = istr.readInt();
            iceP_b = istr.readInt();
            inS.endReadParams();
            var ret = obj.add(iceP_a, iceP_b, current);
            var ostr = inS.startWriteParams();
            ostr.writeInt(ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_subtract(Calculator obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            int iceP_a;
            int iceP_b;
            iceP_a = istr.readInt();
            iceP_b = istr.readInt();
            inS.endReadParams();
            var ret = obj.subtract(iceP_a, iceP_b, current);
            var ostr = inS.startWriteParams();
            ostr.writeInt(ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_multiply(Calculator obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            int iceP_a;
            int iceP_b;
            iceP_a = istr.readInt();
            iceP_b = istr.readInt();
            inS.endReadParams();
            var ret = obj.multiply(iceP_a, iceP_b, current);
            var ostr = inS.startWriteParams();
            ostr.writeInt(ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_dynamichello(Calculator obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            string iceP_name;
            iceP_name = istr.readString();
            inS.endReadParams();
            var ret = obj.dynamichello(iceP_name, current);
            var ostr = inS.startWriteParams();
            ostr.writeString(ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        private static readonly string[] _all =
        {
            "add",
            "dynamichello",
            "ice_id",
            "ice_ids",
            "ice_isA",
            "ice_ping",
            "multiply",
            "subtract"
        };

        public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceDispatch(global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            int pos = global::System.Array.BinarySearch(_all, current.operation, global::IceUtilInternal.StringUtil.OrdinalStringComparer);
            if(pos < 0)
            {
                throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
            }

            switch(pos)
            {
                case 0:
                {
                    return iceD_add(this, inS, current);
                }
                case 1:
                {
                    return iceD_dynamichello(this, inS, current);
                }
                case 2:
                {
                    return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                }
                case 3:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                }
                case 4:
                {
                    return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                }
                case 5:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                }
                case 6:
                {
                    return iceD_multiply(this, inS, current);
                }
                case 7:
                {
                    return iceD_subtract(this, inS, current);
                }
            }

            global::System.Diagnostics.Debug.Assert(false);
            throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        #endregion
    }
}
