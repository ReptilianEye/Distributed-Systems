// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.3
// source: trader.proto

package trader

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type InstrumentType int32

const (
	InstrumentType_CURRENCY       InstrumentType = 0
	InstrumentType_CRYPTOCURRENCY InstrumentType = 1
	InstrumentType_COMMODITY      InstrumentType = 2
)

// Enum value maps for InstrumentType.
var (
	InstrumentType_name = map[int32]string{
		0: "CURRENCY",
		1: "CRYPTOCURRENCY",
		2: "COMMODITY",
	}
	InstrumentType_value = map[string]int32{
		"CURRENCY":       0,
		"CRYPTOCURRENCY": 1,
		"COMMODITY":      2,
	}
)

func (x InstrumentType) Enum() *InstrumentType {
	p := new(InstrumentType)
	*p = x
	return p
}

func (x InstrumentType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InstrumentType) Descriptor() protoreflect.EnumDescriptor {
	return file_trader_proto_enumTypes[0].Descriptor()
}

func (InstrumentType) Type() protoreflect.EnumType {
	return &file_trader_proto_enumTypes[0]
}

func (x InstrumentType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InstrumentType.Descriptor instead.
func (InstrumentType) EnumDescriptor() ([]byte, []int) {
	return file_trader_proto_rawDescGZIP(), []int{0}
}

type Currency int32

const (
	Currency_USD Currency = 0
	Currency_EUR Currency = 1
	Currency_PLN Currency = 2
)

// Enum value maps for Currency.
var (
	Currency_name = map[int32]string{
		0: "USD",
		1: "EUR",
		2: "PLN",
	}
	Currency_value = map[string]int32{
		"USD": 0,
		"EUR": 1,
		"PLN": 2,
	}
)

func (x Currency) Enum() *Currency {
	p := new(Currency)
	*p = x
	return p
}

func (x Currency) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Currency) Descriptor() protoreflect.EnumDescriptor {
	return file_trader_proto_enumTypes[1].Descriptor()
}

func (Currency) Type() protoreflect.EnumType {
	return &file_trader_proto_enumTypes[1]
}

func (x Currency) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Currency.Descriptor instead.
func (Currency) EnumDescriptor() ([]byte, []int) {
	return file_trader_proto_rawDescGZIP(), []int{1}
}

type Filter struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Type          InstrumentType         `protobuf:"varint,1,opt,name=type,proto3,enum=trader.InstrumentType" json:"type,omitempty"`
	Currency      Currency               `protobuf:"varint,2,opt,name=currency,proto3,enum=trader.Currency" json:"currency,omitempty"`
	MaxPrice      float64                `protobuf:"fixed64,3,opt,name=maxPrice,proto3" json:"maxPrice,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Filter) Reset() {
	*x = Filter{}
	mi := &file_trader_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Filter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Filter) ProtoMessage() {}

func (x *Filter) ProtoReflect() protoreflect.Message {
	mi := &file_trader_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Filter.ProtoReflect.Descriptor instead.
func (*Filter) Descriptor() ([]byte, []int) {
	return file_trader_proto_rawDescGZIP(), []int{0}
}

func (x *Filter) GetType() InstrumentType {
	if x != nil {
		return x.Type
	}
	return InstrumentType_CURRENCY
}

func (x *Filter) GetCurrency() Currency {
	if x != nil {
		return x.Currency
	}
	return Currency_USD
}

func (x *Filter) GetMaxPrice() float64 {
	if x != nil {
		return x.MaxPrice
	}
	return 0
}

type OfferList struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Offers        []*Offer               `protobuf:"bytes,1,rep,name=offers,proto3" json:"offers,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OfferList) Reset() {
	*x = OfferList{}
	mi := &file_trader_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OfferList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OfferList) ProtoMessage() {}

func (x *OfferList) ProtoReflect() protoreflect.Message {
	mi := &file_trader_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OfferList.ProtoReflect.Descriptor instead.
func (*OfferList) Descriptor() ([]byte, []int) {
	return file_trader_proto_rawDescGZIP(), []int{1}
}

func (x *OfferList) GetOffers() []*Offer {
	if x != nil {
		return x.Offers
	}
	return nil
}

type Offer struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Type          InstrumentType         `protobuf:"varint,1,opt,name=type,proto3,enum=trader.InstrumentType" json:"type,omitempty"`
	Symbol        string                 `protobuf:"bytes,2,opt,name=symbol,proto3" json:"symbol,omitempty"`
	CurrentPrice  float64                `protobuf:"fixed64,3,opt,name=currentPrice,proto3" json:"currentPrice,omitempty"`
	BaseCurrency  Currency               `protobuf:"varint,4,opt,name=baseCurrency,proto3,enum=trader.Currency" json:"baseCurrency,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Offer) Reset() {
	*x = Offer{}
	mi := &file_trader_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Offer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Offer) ProtoMessage() {}

func (x *Offer) ProtoReflect() protoreflect.Message {
	mi := &file_trader_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Offer.ProtoReflect.Descriptor instead.
func (*Offer) Descriptor() ([]byte, []int) {
	return file_trader_proto_rawDescGZIP(), []int{2}
}

func (x *Offer) GetType() InstrumentType {
	if x != nil {
		return x.Type
	}
	return InstrumentType_CURRENCY
}

func (x *Offer) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *Offer) GetCurrentPrice() float64 {
	if x != nil {
		return x.CurrentPrice
	}
	return 0
}

func (x *Offer) GetBaseCurrency() Currency {
	if x != nil {
		return x.BaseCurrency
	}
	return Currency_USD
}

type Subscription struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Symbols       []string               `protobuf:"bytes,1,rep,name=symbols,proto3" json:"symbols,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Subscription) Reset() {
	*x = Subscription{}
	mi := &file_trader_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Subscription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Subscription) ProtoMessage() {}

func (x *Subscription) ProtoReflect() protoreflect.Message {
	mi := &file_trader_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Subscription.ProtoReflect.Descriptor instead.
func (*Subscription) Descriptor() ([]byte, []int) {
	return file_trader_proto_rawDescGZIP(), []int{3}
}

func (x *Subscription) GetSymbols() []string {
	if x != nil {
		return x.Symbols
	}
	return nil
}

type Rate struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Symbol        string                 `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Price         float64                `protobuf:"fixed64,2,opt,name=price,proto3" json:"price,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Rate) Reset() {
	*x = Rate{}
	mi := &file_trader_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Rate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Rate) ProtoMessage() {}

func (x *Rate) ProtoReflect() protoreflect.Message {
	mi := &file_trader_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Rate.ProtoReflect.Descriptor instead.
func (*Rate) Descriptor() ([]byte, []int) {
	return file_trader_proto_rawDescGZIP(), []int{4}
}

func (x *Rate) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *Rate) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

var File_trader_proto protoreflect.FileDescriptor

const file_trader_proto_rawDesc = "" +
	"\n" +
	"\ftrader.proto\x12\x06trader\"~\n" +
	"\x06Filter\x12*\n" +
	"\x04type\x18\x01 \x01(\x0e2\x16.trader.InstrumentTypeR\x04type\x12,\n" +
	"\bcurrency\x18\x02 \x01(\x0e2\x10.trader.CurrencyR\bcurrency\x12\x1a\n" +
	"\bmaxPrice\x18\x03 \x01(\x01R\bmaxPrice\"2\n" +
	"\tOfferList\x12%\n" +
	"\x06offers\x18\x01 \x03(\v2\r.trader.OfferR\x06offers\"\xa5\x01\n" +
	"\x05Offer\x12*\n" +
	"\x04type\x18\x01 \x01(\x0e2\x16.trader.InstrumentTypeR\x04type\x12\x16\n" +
	"\x06symbol\x18\x02 \x01(\tR\x06symbol\x12\"\n" +
	"\fcurrentPrice\x18\x03 \x01(\x01R\fcurrentPrice\x124\n" +
	"\fbaseCurrency\x18\x04 \x01(\x0e2\x10.trader.CurrencyR\fbaseCurrency\"(\n" +
	"\fSubscription\x12\x18\n" +
	"\asymbols\x18\x01 \x03(\tR\asymbols\"4\n" +
	"\x04Rate\x12\x16\n" +
	"\x06symbol\x18\x01 \x01(\tR\x06symbol\x12\x14\n" +
	"\x05price\x18\x02 \x01(\x01R\x05price*A\n" +
	"\x0eInstrumentType\x12\f\n" +
	"\bCURRENCY\x10\x00\x12\x12\n" +
	"\x0eCRYPTOCURRENCY\x10\x01\x12\r\n" +
	"\tCOMMODITY\x10\x02*%\n" +
	"\bCurrency\x12\a\n" +
	"\x03USD\x10\x00\x12\a\n" +
	"\x03EUR\x10\x01\x12\a\n" +
	"\x03PLN\x10\x022t\n" +
	"\x06Trader\x120\n" +
	"\tGetOffers\x12\x0e.trader.Filter\x1a\x11.trader.OfferList\"\x00\x128\n" +
	"\tSubscribe\x12\x14.trader.Subscription\x1a\x11.trader.OfferList\"\x000\x01B\x1fZ\x1dexample/trading-app/v2/traderb\x06proto3"

var (
	file_trader_proto_rawDescOnce sync.Once
	file_trader_proto_rawDescData []byte
)

func file_trader_proto_rawDescGZIP() []byte {
	file_trader_proto_rawDescOnce.Do(func() {
		file_trader_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_trader_proto_rawDesc), len(file_trader_proto_rawDesc)))
	})
	return file_trader_proto_rawDescData
}

var file_trader_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_trader_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_trader_proto_goTypes = []any{
	(InstrumentType)(0),  // 0: trader.InstrumentType
	(Currency)(0),        // 1: trader.Currency
	(*Filter)(nil),       // 2: trader.Filter
	(*OfferList)(nil),    // 3: trader.OfferList
	(*Offer)(nil),        // 4: trader.Offer
	(*Subscription)(nil), // 5: trader.Subscription
	(*Rate)(nil),         // 6: trader.Rate
}
var file_trader_proto_depIdxs = []int32{
	0, // 0: trader.Filter.type:type_name -> trader.InstrumentType
	1, // 1: trader.Filter.currency:type_name -> trader.Currency
	4, // 2: trader.OfferList.offers:type_name -> trader.Offer
	0, // 3: trader.Offer.type:type_name -> trader.InstrumentType
	1, // 4: trader.Offer.baseCurrency:type_name -> trader.Currency
	2, // 5: trader.Trader.GetOffers:input_type -> trader.Filter
	5, // 6: trader.Trader.Subscribe:input_type -> trader.Subscription
	3, // 7: trader.Trader.GetOffers:output_type -> trader.OfferList
	3, // 8: trader.Trader.Subscribe:output_type -> trader.OfferList
	7, // [7:9] is the sub-list for method output_type
	5, // [5:7] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_trader_proto_init() }
func file_trader_proto_init() {
	if File_trader_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_trader_proto_rawDesc), len(file_trader_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_trader_proto_goTypes,
		DependencyIndexes: file_trader_proto_depIdxs,
		EnumInfos:         file_trader_proto_enumTypes,
		MessageInfos:      file_trader_proto_msgTypes,
	}.Build()
	File_trader_proto = out.File
	file_trader_proto_goTypes = nil
	file_trader_proto_depIdxs = nil
}
