// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: trader.proto

package trader

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Trader_GetOffers_FullMethodName = "/trader.Trader/GetOffers"
	Trader_Subscribe_FullMethodName = "/trader.Trader/Subscribe"
)

// TraderClient is the client API for Trader service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TraderClient interface {
	GetOffers(ctx context.Context, in *Filter, opts ...grpc.CallOption) (*OfferList, error)
	Subscribe(ctx context.Context, in *Subscription, opts ...grpc.CallOption) (grpc.ServerStreamingClient[OfferList], error)
}

type traderClient struct {
	cc grpc.ClientConnInterface
}

func NewTraderClient(cc grpc.ClientConnInterface) TraderClient {
	return &traderClient{cc}
}

func (c *traderClient) GetOffers(ctx context.Context, in *Filter, opts ...grpc.CallOption) (*OfferList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OfferList)
	err := c.cc.Invoke(ctx, Trader_GetOffers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *traderClient) Subscribe(ctx context.Context, in *Subscription, opts ...grpc.CallOption) (grpc.ServerStreamingClient[OfferList], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Trader_ServiceDesc.Streams[0], Trader_Subscribe_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[Subscription, OfferList]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Trader_SubscribeClient = grpc.ServerStreamingClient[OfferList]

// TraderServer is the server API for Trader service.
// All implementations must embed UnimplementedTraderServer
// for forward compatibility.
type TraderServer interface {
	GetOffers(context.Context, *Filter) (*OfferList, error)
	Subscribe(*Subscription, grpc.ServerStreamingServer[OfferList]) error
	mustEmbedUnimplementedTraderServer()
}

// UnimplementedTraderServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTraderServer struct{}

func (UnimplementedTraderServer) GetOffers(context.Context, *Filter) (*OfferList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOffers not implemented")
}
func (UnimplementedTraderServer) Subscribe(*Subscription, grpc.ServerStreamingServer[OfferList]) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedTraderServer) mustEmbedUnimplementedTraderServer() {}
func (UnimplementedTraderServer) testEmbeddedByValue()                {}

// UnsafeTraderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TraderServer will
// result in compilation errors.
type UnsafeTraderServer interface {
	mustEmbedUnimplementedTraderServer()
}

func RegisterTraderServer(s grpc.ServiceRegistrar, srv TraderServer) {
	// If the following call pancis, it indicates UnimplementedTraderServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Trader_ServiceDesc, srv)
}

func _Trader_GetOffers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Filter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TraderServer).GetOffers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Trader_GetOffers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TraderServer).GetOffers(ctx, req.(*Filter))
	}
	return interceptor(ctx, in, info, handler)
}

func _Trader_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Subscription)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TraderServer).Subscribe(m, &grpc.GenericServerStream[Subscription, OfferList]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Trader_SubscribeServer = grpc.ServerStreamingServer[OfferList]

// Trader_ServiceDesc is the grpc.ServiceDesc for Trader service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Trader_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "trader.Trader",
	HandlerType: (*TraderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOffers",
			Handler:    _Trader_GetOffers_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _Trader_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "trader.proto",
}
